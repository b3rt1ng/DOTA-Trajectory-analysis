/**
    @brief The AffinityPropagation class represents an implementation of the affinity propagation clustering algorithm.
    The affinity propagation algorithm is a clustering algorithm that does not require the number of clusters to be specified.
    It works by iteratively passing messages between data points, where each data point represents a potential exemplar for
    its cluster. The algorithm is designed to identify the most representative data points as exemplars, and to assign each
    remaining data point to its nearest exemplar.
    This implementation extends the Clustering class.
    */
#pragma once
#include "Clustering.h"

class AffinityPropagation : public Clustering {
   private:
    std::unordered_map<MainSegment, std::vector<SegmentPlayer>> clusters;

   public:
    /**
     * @brief Constructor for the AffinityPropagation class.
     *
     * @param segment A vector of SegmentPlayer objects representing the dataset to be clustered.
     * @param nb_iteration The maximum number of iterations for the algorithm.
     * @param angle_factor A factor used to calculate the distance between two segments based on their angle.
     * @param perpendicular_factor A factor used to calculate the distance between two segments based on their perpendicular distance.
     * @param parallel_factor A factor used to calculate the distance between two segments based on their parallel distance.
     * @param nb_thread The number of threads to use for the algorithm.
     */
    AffinityPropagation(std::vector<SegmentPlayer>& segment, int nb_iteration, double angle_factor, double perpendicular_factor, double parallel_factor, int nb_thread);

    /**
     * @brief Getter method to retrieve the exemplars of each cluster.
     *
     * @return A vector of Segment objects representing the exemplars of each cluster.
     */
    std::vector<Segment> getCenters();

    /**
     * @brief Method to retrieve the clusters generated by the algorithm in the right format.
     *
     * @return An unordered map that maps each exemplar to a vector of SegmentPlayer objects representing the segments
     *         that belong to the cluster represented by the exemplar.
     */
    std::unordered_map<MainSegment, std::vector<SegmentPlayer>> getClusters();

    /**
     * @brief Executes the affinity propagation algorithm.
     *
     * The algorithm iteratively passes messages between data points, until convergence is achieved or the maximum number of
     * iterations is reached. The resulting clusters are stored in a vector.
     *
     * @return A vector of vectors of SegmentPlayer objects representing the clusters generated by the algorithm.
     */
    std::vector<std::vector<SegmentPlayer>> start();

    /**
     * @brief Generates an initial similarity matrix for the affinity propagation algorithm.
     *
     * The similarity matrix is a square matrix that contains the pairwise similarity values between all data points in the dataset.
     *
     * @param size The size of the similarity matrix (equal to the number of data points in the dataset).
     * @return A vector of vectors of double values representing the similarity matrix.
     */
    std::vector<std::vector<double>> generateMatrix(int size);
};
